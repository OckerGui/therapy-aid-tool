# ----------------------- 
# How to train a YOLO nn 
# ----------------------- 


File Organization
-----------------
1. On your project directory, create a folder named `nn/` for all your neural nets;

2. Inside the `nn/` folder, create a folfer named `obj/` for your specific neural net. 
    Obs: "obj" is just an example, change the name according to your needs.

3. Inside the `obj` folder, create:
   3.1. A `backup/`   folder  (to save weights while training)
   3.2. A `data/`  folder (with your images and annotations to train and validate)
   3.3. A `names.txt` file (with the classes name line by line)
   3.4. A `train.txt` file (with the paths of the images to train )
   3.5. A `valid.txt` file (with the paths of the images to validate)
   3.6. A `data.txt`  file (with information about where to get data and save weights) containing:  
        classes = (number of classes)
        train =   (path to the train.txt file)
        valid =   (path to the valid.txt file)
        names =   (path to the names.txt file)
        backup =  (path to the backup/obj folder)
   3.7. A `.cfg` file with the structure of a yolo neural net.
   3.8. A `pt.weights` file with pre trained weights if you want (optional) 


Edit the .cfg file
------------------
batch=64
subdivisions=16
max_batches=classes*2000 (min 6000 and greater than the number of images)
steps=0.8*max_batches, 0.9*max_batches
width=416  (or any value multiple of 32)
height=416 (or any value multiple of 32)
classes=classes (in each of the 3 `[yolo]` layers
filters=(classes + 5)*3 (in each of the 3 `[convolutional]` layers


Git project
-----------
Add to .gitignore the folowing file and folders: 
    *.weights
    dataset/
    backup/

    
Run this in terminal to setup training (rename obj and yolo version)
--------------------------------------------------------------------
mkdir -p nn
mkdir -p nn/obj
mkdir -p nn/obj/backup
mkdir -p nn/obj/dataset
cd nn/obj
touch {names,train,valid,data}.txt
touch yolo.cfg yolo_pt.weights


Train
-----
$darknet detector train $data $cfg $weights -map -dont_show


Test
----
# Image(s)
$darknet detector test $data $cfg $weights $input -dont_show (add -out_file $output if necessary)

# Video
$darknet detector demo $data $cfg $weights $input -out_filename $output -dont_show
